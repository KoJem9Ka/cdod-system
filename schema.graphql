# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type Group {
  Students: [Student]
  course: String!
  dateOfCreation: String!
  groupName: String!
  id: ID!
  studentsCount: Int!
  teacher: String!
}

type ListMetadata {
  count: Int
}

type Mutation {
  createGroup(course: String!, dateOfCreation: String!, groupName: String!, studentsCount: Int!, teacher: String!): Group
  createManyGroup(data: [GroupInput]): [Group]
  createManyStudent(data: [StudentInput]): [Student]
  createManyUser(data: [UserInput]): [User]
  createStudent(birth_date: String!, contract_status: String!, course: String!, first_name: String!, group: String!, group_id: ID!, last_name: String!, materials_paid: Boolean, notes: String, paid: Boolean!, patronymic: String!, phone_number: String!, request_date: String!): Student
  createUser(login: String!, name_first: String!, name_second: String!, name_third: String!, type: String!): User
  removeGroup(id: ID!): Group
  removeStudent(id: ID!): Student
  removeUser(id: ID!): User
  updateGroup(course: String, dateOfCreation: String, groupName: String, id: ID!, studentsCount: Int, teacher: String): Group
  updateStudent(birth_date: String, contract_status: String, course: String, first_name: String, group: String, group_id: ID, id: ID!, last_name: String, materials_paid: Boolean, notes: String, paid: Boolean, patronymic: String, phone_number: String, request_date: String): Student
  updateUser(id: ID!, login: String, name_first: String, name_second: String, name_third: String, type: String): User
}

type Query {
  Group(id: ID!): Group
  Student(id: ID!): Student
  User(id: ID!): User
  _allGroupsMeta(filter: GroupFilter, page: Int, perPage: Int): ListMetadata
  _allStudentsMeta(filter: StudentFilter, page: Int, perPage: Int): ListMetadata
  _allUsersMeta(filter: UserFilter, page: Int, perPage: Int): ListMetadata
  allGroups(filter: GroupFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Group]
  allStudents(filter: StudentFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Student]
  allUsers(filter: UserFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [User]
}

type Student {
  Group: Group
  birth_date: String!
  contract_status: String!
  course: String!
  first_name: String!
  group: String!
  group_id: ID!
  id: ID!
  last_name: String!
  materials_paid: Boolean
  notes: String
  paid: Boolean!
  patronymic: String!
  phone_number: String!
  request_date: String!
}

type User {
  id: ID!
  login: String!
  name_first: String!
  name_second: String!
  name_third: String!
  type: String!
}

input GroupFilter {
  course: String
  course_neq: String
  dateOfCreation: String
  dateOfCreation_neq: String
  groupName: String
  groupName_neq: String
  id: ID
  id_neq: ID
  ids: [ID]
  q: String
  studentsCount: Int
  studentsCount_gt: Int
  studentsCount_gte: Int
  studentsCount_lt: Int
  studentsCount_lte: Int
  studentsCount_neq: Int
  teacher: String
  teacher_neq: String
}

input GroupInput {
  course: String!
  dateOfCreation: String!
  groupName: String!
  id: ID!
  studentsCount: Int!
  teacher: String!
}

input StudentFilter {
  birth_date: String
  birth_date_neq: String
  contract_status: String
  contract_status_neq: String
  course: String
  course_neq: String
  first_name: String
  first_name_neq: String
  group: String
  group_id: ID
  group_id_neq: ID
  group_neq: String
  id: ID
  id_neq: ID
  ids: [ID]
  last_name: String
  last_name_neq: String
  materials_paid: Boolean
  notes: String
  notes_neq: String
  paid: Boolean
  patronymic: String
  patronymic_neq: String
  phone_number: String
  phone_number_neq: String
  q: String
  request_date: String
  request_date_neq: String
}

input StudentInput {
  birth_date: String!
  contract_status: String!
  course: String!
  first_name: String!
  group: String!
  group_id: ID!
  id: ID!
  last_name: String!
  materials_paid: Boolean
  notes: String
  paid: Boolean!
  patronymic: String!
  phone_number: String!
  request_date: String!
}

input UserFilter {
  id: ID
  id_neq: ID
  ids: [ID]
  login: String
  login_neq: String
  name_first: String
  name_first_neq: String
  name_second: String
  name_second_neq: String
  name_third: String
  name_third_neq: String
  q: String
  type: String
  type_neq: String
}

input UserInput {
  id: ID!
  login: String!
  name_first: String!
  name_second: String!
  name_third: String!
  type: String!
}
