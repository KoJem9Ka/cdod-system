# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer(
  "Deferred when true."
  if: Boolean,
  "If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to."
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream(
  "Streamed when true."
  if: Boolean,
  "The initial elements that shall be send down to the consumer."
  initialCount: Int! = 0,
  "If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to."
  label: String
) on FIELD

directive @authorize(
  "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field."
  apply: ApplyPolicy! = BEFORE_RESOLVER,
  "The name of the authorization policy that determines access to the annotated resource."
  policy: String,
  "Roles that are allowed to access the annotated resource."
  roles: [String!]
) on SCHEMA | OBJECT | FIELD_DEFINITION

type AttendanceType {
  lesson: LessonType!
  lessonId: Int!
  mark: Int!
  note: String!
  status: Status!
  student: StudentType!
  studentId: Int!
}

type CourseType {
  color: String
  durationInMonths: Int
  equipmentPriceWithRobot: Float
  equipmentPriceWithoutRobot: Float
  id: Int!
  name: String!
  price: Float
  programId: Int
  svgIconUrl: String
}

type GroupType {
  course: CourseType!
  courseId: Int!
  id: Int!
  name: String!
  startDate: Date!
  studentsCount: Int!
  teacher: TeacherType!
  teacherId: Int!
}

type InfoType {
  admissionDate: Date!
  attempt: Int!
  contractState: ContractState!
  course: CourseType!
  courseId: Int!
  group: GroupType
  isCoursePaid: Boolean
  isEquipmentPaid: Boolean
  isGetRobot: Boolean
  studentId: Int!
}

type LessonType {
  classRoom: String!
  duration: Int!
  group: GroupType!
  groupId: Int!
  homework: String!
  id: Int!
  startDateTime: DateTime!
  topic: String!
}

type Mutation {
  courseCreateCourse(course: CourseCreateInput!): CourseType!
  courseUpdateMany(courses: [CourseUpdateInput!]!): Boolean!
  createPost(post: PostCreateInput!): PostType!
  createSchool(school: SchoolCreateInput!): SchoolType!
  groupCreate(group: GroupCreateInput!): GroupType!
  groupDeleteMany(groupIds: [Int!]!): Boolean!
  groupUpdateMany(groups: [GroupUpdateInput!]!): Boolean!
  login(loginInput: LoginInput!): TokenResponseType!
  parentCreate(parent: ParentInput!): ParentType!
  parentDeleteMany(parentsIds: [Int!]!): Boolean!
  parentUpdate(id: Int!, parent: ParentInput!): ParentType!
  postUpdateMany(posts: [PostUpdateInput!]!): Boolean!
  renewAccessToken(renewToken: RenewTokenInput!): TokenResponseType!
  schoolDeleteMany(postIds: [Int!]!, schoolIds: [Int!]!): Boolean!
  schoolUpdateMany(schools: [SchoolUpdateInput!]!): Boolean!
  studentCreate(student: StudentCreateInput!): StudentType!
  studentDeleteMany(studentIds: [Int!]!): Boolean!
  studentStudyCreateMany(studentToCourseCreate: [StudentToCourseCreateInput!]!): Boolean!
  studentStudyUpdateMany(studentToCourseUpdate: [StudentToCourseUpdateInput!]!): Boolean!
  studentUpdateMany(students: [StudentUpdateInput!]!): Boolean!
  studentsStudyDeleteMany(studentToCourseDetach: [StudentToCourseDetachInput!]!): Boolean!
  teacherCreate(teacher: TeacherInput!): TeacherType!
  teacherDeleteMany(teacherIds: [Int!]!): Boolean!
  teacherUpdate(id: Int!, teacher: TeacherInput!): Boolean!
  wageRateCreate(wageRate: WageRateCreateInput!): WageRateType!
  wageRateDeleteMany(wageRateIds: [Int!]!): Boolean!
  wageRateUpdateMany(wageRates: [WageRateUpdateInput!]!): Boolean!
}

type ParentType {
  address: String
  applyingDate: Date
  birthday: Date
  education: String
  email: String
  firstName: String
  id: Int!
  inn: String
  isAdmin: Boolean!
  lastName: String
  passportCode: String
  passportDate: Date
  passportIssue: String
  passportNo: String
  password: String
  patronymic: String
  phoneNumber: String
  secondEmail: String
  secondPhoneNumber: String
  snils: String
  type: RelationType
}

type PostType {
  id: Int!
  name: String!
}

type ProgramType {
  hours: Int!
  id: Int!
  name: String!
  programFileUrl: String
  topics: String
}

type Query {
  attendances(courseId: Int, lessonId: Int, order: [AttendanceTypeSortInput!], studentId: Int, where: AttendanceTypeFilterInput): [AttendanceType!]!
  course(id: Int!): CourseType!
  courses(order: [CourseTypeSortInput!], where: CourseTypeFilterInput): [CourseType!]!
  group(id: Int!): GroupType!
  groups(courseId: Int, order: [GroupTypeSortInput!], where: GroupTypeFilterInput): [GroupType!]!
  lesson(id: Int!): LessonType!
  lessons(groupId: Int, order: [LessonTypeSortInput!], studentId: Int, teacherId: Int, where: LessonTypeFilterInput): [LessonType!]!
  parent(id: Int!): ParentType!
  parents(order: [ParentTypeSortInput!], where: ParentTypeFilterInput): [ParentType!]!
  post(id: Int!): PostType!
  posts(order: [PostTypeSortInput!], where: PostTypeFilterInput): [PostType!]!
  program(id: Int!): ProgramType!
  programs(order: [ProgramTypeSortInput!], where: ProgramTypeFilterInput): [ProgramType!]!
  school(id: Int!): SchoolType!
  schools(order: [SchoolTypeSortInput!], where: SchoolTypeFilterInput): [SchoolType!]!
  student(id: Int!): StudentType!
  students(courseId: Int, groupId: Int, order: [StudentTypeSortInput!], parentId: Int, schoolId: Int, where: StudentTypeFilterInput): [StudentType!]!
  teacher(groupId: Int, id: Int): TeacherType!
  teachers(lessonId: Int, order: [TeacherTypeSortInput!], where: TeacherTypeFilterInput): [TeacherType!]!
  teachersWorkTime(lessonId: Int, order: [TeachersWorkTimeTypeSortInput!], teacherId: Int, where: TeachersWorkTimeTypeFilterInput): [TeachersWorkTimeType!]!
}

type SchoolType {
  district: District
  id: Int!
  name: String!
  students: [StudentType!]!
}

type StudentType {
  birthDate: Date
  description: String
  firstName: String
  id: Int!
  info: [InfoType!]!
  lastName: String
  parent: ParentType!
  parentId: Int!
  patronymic: String
  school: SchoolType
  schoolId: Int
}

type TeacherType {
  address: String
  birthday: Date
  education: String
  email: String!
  firstName: String
  id: Int!
  inn: String
  isAdmin: Boolean!
  lastName: String
  passportCode: String
  passportDate: Date
  passportIssue: String
  passportNo: String
  password: String!
  patronymic: String
  phoneNumber: String
  post: String
  postId: Int
  snils: String
  workPlace: String!
}

type TeachersWorkTimeType {
  lesson: LessonType!
  lessonId: Int!
  teacher: TeacherType!
  teacherId: Int!
  workTime: TimeSpan!
}

type TokenResponseType {
  accessToken: String
  message: String
  refreshToken: String
}

type WageRateType {
  id: Int!
  rate: Float!
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
}

enum ContractState {
  COMPLETED
  CONSIDERATION
  EXCLUDED
  LEFT
  REJECTED
  STUDYING
}

enum District {
  CENTRAL
  TRACTOR
  VOROSHILOVSKIY
}

enum RelationType {
  AUNT
  BROTHER
  FATHER
  GODPARENT
  GRANDMA
  GRANDPA
  GUARDIAN
  MOTHER
  OTHER
  SISTER
  UNCLE
}

enum SortEnumType {
  ASC
  DESC
}

enum Status {
  ABSENT
  ABSENT_VALID_REASON
  ATTENDED
}

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

input AttendanceTypeFilterInput {
  and: [AttendanceTypeFilterInput!]
  lessonId: ComparableInt32OperationFilterInput
  mark: ComparableInt32OperationFilterInput
  note: StringOperationFilterInput
  or: [AttendanceTypeFilterInput!]
  status: StatusOperationFilterInput
  studentId: ComparableInt32OperationFilterInput
}

input AttendanceTypeSortInput {
  lessonId: SortEnumType
  mark: SortEnumType
  note: SortEnumType
  status: SortEnumType
  studentId: SortEnumType
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableDateOnlyOperationFilterInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  lt: Date
  lte: Date
  neq: Date
  ngt: Date
  ngte: Date
  nin: [Date!]
  nlt: Date
  nlte: Date
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  neq: DateTime
  ngt: DateTime
  ngte: DateTime
  nin: [DateTime!]
  nlt: DateTime
  nlte: DateTime
}

input ComparableInt32OperationFilterInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  neq: Int
  ngt: Int
  ngte: Int
  nin: [Int!]
  nlt: Int
  nlte: Int
}

input ComparableNullableOfDateOnlyOperationFilterInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  neq: Date
  ngt: Date
  ngte: Date
  nin: [Date]
  nlt: Date
  nlte: Date
}

input ComparableNullableOfDoubleOperationFilterInput {
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  neq: Float
  ngt: Float
  ngte: Float
  nin: [Float]
  nlt: Float
  nlte: Float
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  neq: Int
  ngt: Int
  ngte: Int
  nin: [Int]
  nlt: Int
  nlte: Int
}

input ComparableTimeOnlyOperationFilterInput {
  eq: TimeSpan
  gt: TimeSpan
  gte: TimeSpan
  in: [TimeSpan!]
  lt: TimeSpan
  lte: TimeSpan
  neq: TimeSpan
  ngt: TimeSpan
  ngte: TimeSpan
  nin: [TimeSpan!]
  nlt: TimeSpan
  nlte: TimeSpan
}

input CourseCreateInput {
  color: String
  coursePrice: Float
  durationInMonths: Int
  equipmentPriceWithRobot: Float
  equipmentPriceWithoutRobot: Float
  name: String!
  programId: Int
  svgIconColor: String
}

input CourseTypeFilterInput {
  and: [CourseTypeFilterInput!]
  color: StringOperationFilterInput
  durationInMonths: ComparableNullableOfInt32OperationFilterInput
  equipmentPriceWithRobot: ComparableNullableOfDoubleOperationFilterInput
  equipmentPriceWithoutRobot: ComparableNullableOfDoubleOperationFilterInput
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  or: [CourseTypeFilterInput!]
  price: ComparableNullableOfDoubleOperationFilterInput
  programId: ComparableNullableOfInt32OperationFilterInput
  svgIconUrl: StringOperationFilterInput
}

input CourseTypeSortInput {
  color: SortEnumType
  durationInMonths: SortEnumType
  equipmentPriceWithRobot: SortEnumType
  equipmentPriceWithoutRobot: SortEnumType
  id: SortEnumType
  name: SortEnumType
  price: SortEnumType
  programId: SortEnumType
  svgIconUrl: SortEnumType
}

input CourseUpdateInput {
  color: String
  coursePrice: Float
  durationInMonths: Int
  equipmentPriceWithRobot: Float
  equipmentPriceWithoutRobot: Float
  id: Int!
  name: String
  programId: Int
  svgIconColor: String
}

input GroupCreateInput {
  courseId: Int!
  name: String!
  startDate: Date!
  teacherId: Int!
}

input GroupTypeFilterInput {
  and: [GroupTypeFilterInput!]
  courseId: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  or: [GroupTypeFilterInput!]
  startDate: ComparableDateOnlyOperationFilterInput
  teacherId: ComparableInt32OperationFilterInput
}

input GroupTypeSortInput {
  courseId: SortEnumType
  id: SortEnumType
  name: SortEnumType
  startDate: SortEnumType
  teacherId: SortEnumType
}

input GroupUpdateInput {
  id: Int!
  name: String
  startDate: Date
  teacherId: Int
}

input LessonTypeFilterInput {
  and: [LessonTypeFilterInput!]
  classRoom: StringOperationFilterInput
  duration: ComparableInt32OperationFilterInput
  groupId: ComparableInt32OperationFilterInput
  homework: StringOperationFilterInput
  id: ComparableInt32OperationFilterInput
  or: [LessonTypeFilterInput!]
  startDateTime: ComparableDateTimeOperationFilterInput
  topic: StringOperationFilterInput
}

input LessonTypeSortInput {
  classRoom: SortEnumType
  duration: SortEnumType
  groupId: SortEnumType
  homework: SortEnumType
  id: SortEnumType
  startDateTime: SortEnumType
  topic: SortEnumType
}

input LoginInput {
  email: String!
  password: String!
}

input NullableOfDistrictOperationFilterInput {
  eq: District
  in: [District]
  neq: District
  nin: [District]
}

input NullableOfRelationTypeOperationFilterInput {
  eq: RelationType
  in: [RelationType]
  neq: RelationType
  nin: [RelationType]
}

input ParentInput {
  address: String
  applyingDate: Date
  birthday: Date
  education: String
  email: String
  firstName: String
  inn: String
  lastName: String
  passportCode: String
  passportDate: Date
  passportIssue: String
  passportNo: String
  password: String
  patronymic: String
  phoneNumber: String
  relationType: RelationType
  secondEmail: String
  secondPhoneNumber: String
  snils: String
}

input ParentTypeFilterInput {
  address: StringOperationFilterInput
  and: [ParentTypeFilterInput!]
  applyingDate: ComparableNullableOfDateOnlyOperationFilterInput
  birthday: ComparableNullableOfDateOnlyOperationFilterInput
  education: StringOperationFilterInput
  email: StringOperationFilterInput
  firstName: StringOperationFilterInput
  id: ComparableInt32OperationFilterInput
  inn: StringOperationFilterInput
  isAdmin: BooleanOperationFilterInput
  lastName: StringOperationFilterInput
  or: [ParentTypeFilterInput!]
  passportCode: StringOperationFilterInput
  passportDate: ComparableNullableOfDateOnlyOperationFilterInput
  passportIssue: StringOperationFilterInput
  passportNo: StringOperationFilterInput
  password: StringOperationFilterInput
  patronymic: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  secondEmail: StringOperationFilterInput
  secondPhoneNumber: StringOperationFilterInput
  snils: StringOperationFilterInput
  type: NullableOfRelationTypeOperationFilterInput
}

input ParentTypeSortInput {
  address: SortEnumType
  applyingDate: SortEnumType
  birthday: SortEnumType
  education: SortEnumType
  email: SortEnumType
  firstName: SortEnumType
  id: SortEnumType
  inn: SortEnumType
  isAdmin: SortEnumType
  lastName: SortEnumType
  passportCode: SortEnumType
  passportDate: SortEnumType
  passportIssue: SortEnumType
  passportNo: SortEnumType
  password: SortEnumType
  patronymic: SortEnumType
  phoneNumber: SortEnumType
  secondEmail: SortEnumType
  secondPhoneNumber: SortEnumType
  snils: SortEnumType
  type: SortEnumType
}

input PostCreateInput {
  name: String!
}

input PostTypeFilterInput {
  and: [PostTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  or: [PostTypeFilterInput!]
}

input PostTypeSortInput {
  id: SortEnumType
  name: SortEnumType
}

input PostUpdateInput {
  id: Int!
  name: String!
}

input ProgramTypeFilterInput {
  and: [ProgramTypeFilterInput!]
  hours: ComparableInt32OperationFilterInput
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  or: [ProgramTypeFilterInput!]
  programFileUrl: StringOperationFilterInput
  topics: StringOperationFilterInput
}

input ProgramTypeSortInput {
  hours: SortEnumType
  id: SortEnumType
  name: SortEnumType
  programFileUrl: SortEnumType
  topics: SortEnumType
}

input RenewTokenInput {
  accessToken: String!
  refreshToken: String!
}

input SchoolCreateInput {
  district: District
  name: String!
}

input SchoolTypeFilterInput {
  and: [SchoolTypeFilterInput!]
  district: NullableOfDistrictOperationFilterInput
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  or: [SchoolTypeFilterInput!]
}

input SchoolTypeSortInput {
  district: SortEnumType
  id: SortEnumType
  name: SortEnumType
}

input SchoolUpdateInput {
  district: District
  id: Int!
  name: String
}

input StatusOperationFilterInput {
  eq: Status
  in: [Status!]
  neq: Status
  nin: [Status!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  contains: String
  endsWith: String
  eq: String
  in: [String]
  ncontains: String
  nendsWith: String
  neq: String
  nin: [String]
  nstartsWith: String
  or: [StringOperationFilterInput!]
  startsWith: String
}

input StudentCreateInput {
  birthDate: Date
  description: String
  firstName: String
  lastName: String
  parentId: Int!
  patronymic: String
  schoolId: Int
}

input StudentToCourseCreateInput {
  admissionDate: Date
  contractState: ContractState!
  contractUrl: String
  courseId: Int!
  groupId: Int
  isGetRobot: Boolean
  studentId: Int!
}

input StudentToCourseDetachInput {
  attempt: Int!
  courseId: Int!
  studentId: Int!
}

input StudentToCourseUpdateInput {
  admissionDate: Date
  attempt: Int!
  contractState: ContractState
  contractUrl: String
  courseId: Int!
  groupId: Int
  isGetRobot: Boolean
  studentId: Int!
}

input StudentTypeFilterInput {
  and: [StudentTypeFilterInput!]
  birthDate: ComparableNullableOfDateOnlyOperationFilterInput
  description: StringOperationFilterInput
  firstName: StringOperationFilterInput
  id: ComparableInt32OperationFilterInput
  lastName: StringOperationFilterInput
  or: [StudentTypeFilterInput!]
  parentId: ComparableInt32OperationFilterInput
  patronymic: StringOperationFilterInput
  schoolId: ComparableNullableOfInt32OperationFilterInput
}

input StudentTypeSortInput {
  birthDate: SortEnumType
  description: SortEnumType
  firstName: SortEnumType
  id: SortEnumType
  lastName: SortEnumType
  parentId: SortEnumType
  patronymic: SortEnumType
  schoolId: SortEnumType
}

input StudentUpdateInput {
  birthDate: Date
  description: String
  firstName: String
  id: Int!
  lastName: String
  parentId: Int
  patronymic: String
  schoolId: Int
}

input TeacherInput {
  address: String
  birthday: Date
  education: String
  email: String
  firstName: String
  inn: String
  isAdmin: Boolean
  isInternal: Boolean
  lastName: String
  passportCode: String
  passportDate: Date
  passportIssue: String
  passportNo: String
  password: String
  patronymic: String
  phoneNumber: String
  postId: Int
  snils: String
  wageRateId: Int
  workPlace: String
}

input TeacherTypeFilterInput {
  address: StringOperationFilterInput
  and: [TeacherTypeFilterInput!]
  birthday: ComparableNullableOfDateOnlyOperationFilterInput
  education: StringOperationFilterInput
  email: StringOperationFilterInput
  firstName: StringOperationFilterInput
  id: ComparableInt32OperationFilterInput
  inn: StringOperationFilterInput
  isAdmin: BooleanOperationFilterInput
  lastName: StringOperationFilterInput
  or: [TeacherTypeFilterInput!]
  passportCode: StringOperationFilterInput
  passportDate: ComparableNullableOfDateOnlyOperationFilterInput
  passportIssue: StringOperationFilterInput
  passportNo: StringOperationFilterInput
  password: StringOperationFilterInput
  patronymic: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  postId: ComparableNullableOfInt32OperationFilterInput
  snils: StringOperationFilterInput
  workPlace: StringOperationFilterInput
}

input TeacherTypeSortInput {
  address: SortEnumType
  birthday: SortEnumType
  education: SortEnumType
  email: SortEnumType
  firstName: SortEnumType
  id: SortEnumType
  inn: SortEnumType
  isAdmin: SortEnumType
  lastName: SortEnumType
  passportCode: SortEnumType
  passportDate: SortEnumType
  passportIssue: SortEnumType
  passportNo: SortEnumType
  password: SortEnumType
  patronymic: SortEnumType
  phoneNumber: SortEnumType
  postId: SortEnumType
  snils: SortEnumType
  workPlace: SortEnumType
}

input TeachersWorkTimeTypeFilterInput {
  and: [TeachersWorkTimeTypeFilterInput!]
  lessonId: ComparableInt32OperationFilterInput
  or: [TeachersWorkTimeTypeFilterInput!]
  teacherId: ComparableInt32OperationFilterInput
  workTime: ComparableTimeOnlyOperationFilterInput
}

input TeachersWorkTimeTypeSortInput {
  lessonId: SortEnumType
  teacherId: SortEnumType
  workTime: SortEnumType
}

input WageRateCreateInput {
  rate: Float!
}

input WageRateUpdateInput {
  id: Int!
  rate: Float!
}
