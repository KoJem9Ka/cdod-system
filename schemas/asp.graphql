"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """
  Roles that are allowed to access the annotated resource.
  """
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

type Query {
  students(
    courseId: Int
    groupId: Int
    parentId: Int
    schoolId: Int
    where: StudentTypeFilterInput
    order: [StudentTypeSortInput!]
  ): [StudentType!]!
  student(id: Int!): StudentType!
  groups(
    courseId: Int
    where: GroupTypeFilterInput
    order: [GroupTypeSortInput!]
  ): [GroupType!]!
  group(id: Int!): GroupType!
  courses(
    where: CourseTypeFilterInput
    order: [CourseTypeSortInput!]
  ): [CourseType!]!
  course(id: Int!): CourseType!
  teachers(
    lessonId: Int
    where: TeacherTypeFilterInput
    order: [TeacherTypeSortInput!]
  ): [TeacherType!]!
  teacher(id: Int, groupId: Int): TeacherType!
  teachersWorkTime(
    lessonId: Int
    teacherId: Int
    where: TeachersWorkTimeTypeFilterInput
    order: [TeachersWorkTimeTypeSortInput!]
  ): [TeachersWorkTimeType!]!
  lessons(
    studentId: Int
    teacherId: Int
    groupId: Int
    where: LessonTypeFilterInput
    order: [LessonTypeSortInput!]
  ): [LessonType!]!
  lesson(id: Int!): LessonType!
  attendances(
    lessonId: Int
    studentId: Int
    courseId: Int
    where: AttendanceTypeFilterInput
    order: [AttendanceTypeSortInput!]
  ): [AttendanceType!]!
  parents(
    where: ParentTypeFilterInput
    order: [ParentTypeSortInput!]
  ): [ParentType!]!
  parent(id: Int!): ParentType!
  schools(
    where: SchoolTypeFilterInput
    order: [SchoolTypeSortInput!]
  ): [SchoolType!]!
  school(id: Int!): SchoolType!
  posts(where: PostTypeFilterInput, order: [PostTypeSortInput!]): [PostType!]!
  post(id: Int!): PostType!
  programs(
    where: ProgramTypeFilterInput
    order: [ProgramTypeSortInput!]
  ): [ProgramType!]!
  program(id: Int!): ProgramType!
}

type SchoolType {
  students: [StudentType!]!
  id: Int!
  name: String!
  district: District
}

type StudentType {
  school: SchoolType
  parent: ParentType!
  info: [InfoType!]!
  id: Int!
  firstName: String
  lastName: String
  patronymic: String
  description: String
  birthDate: Date
  schoolId: Int
  parentId: Int!
}

type Mutation {
  updateFromGoogleTable: Boolean!
  login(loginInput: LoginInput!): TokenResponseType!
  renewAccessToken(renewToken: RenewTokenInput!): TokenResponseType!
  parentCreate(parent: ParentInput!): ParentType!
  parentUpdate(id: Int!, parent: ParentInput!): ParentType!
  parentDeleteMany(parentsIds: [Int!]!): Boolean!
  createSchool(school: SchoolCreateInput!): SchoolType!
  schoolUpdateMany(schools: [SchoolUpdateInput!]!): Boolean!
  schoolDeleteMany(schoolIds: [Int!]!): Boolean!
  studentCreate(student: StudentCreateInput!): StudentType!
  studentUpdateMany(students: [StudentUpdateInput!]!): Boolean!
  studentDeleteMany(studentIds: [Int!]!): Boolean!
  studentStudyCreateMany(
    studentToCourseCreate: [StudentToCourseCreateInput!]!
  ): Boolean!
  studentStudyUpdateMany(
    studentToCourseUpdate: [StudentToCourseUpdateInput!]!
  ): Boolean!
  studentsStudyDeleteMany(
    studentToCourseDetach: [StudentToCourseDetachInput!]!
  ): Boolean!
  courseCreateCourse(course: CourseCreateInput!): CourseType!
  courseUpdateMany(courses: [CourseUpdateInput!]!): Boolean!
  teacherCreate(teacher: TeacherInput!): TeacherType!
  teacherUpdate(id: Int!, teacher: TeacherInput!): Boolean!
  teacherDeleteMany(teacherIds: [Int!]!): Boolean!
}

input StudentTypeFilterInput {
  and: [StudentTypeFilterInput!]
  or: [StudentTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  patronymic: StringOperationFilterInput
  description: StringOperationFilterInput
  birthDate: ComparableNullableOfDateOnlyOperationFilterInput
  schoolId: ComparableNullableOfInt32OperationFilterInput
  parentId: ComparableInt32OperationFilterInput
}

input StudentTypeSortInput {
  id: SortEnumType
  firstName: SortEnumType
  lastName: SortEnumType
  patronymic: SortEnumType
  description: SortEnumType
  birthDate: SortEnumType
  schoolId: SortEnumType
  parentId: SortEnumType
}

input GroupTypeFilterInput {
  and: [GroupTypeFilterInput!]
  or: [GroupTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  teacherId: ComparableInt32OperationFilterInput
  startDate: ComparableDateOnlyOperationFilterInput
  courseId: ComparableInt32OperationFilterInput
}

input GroupTypeSortInput {
  id: SortEnumType
  name: SortEnumType
  teacherId: SortEnumType
  startDate: SortEnumType
  courseId: SortEnumType
}

input CourseTypeFilterInput {
  and: [CourseTypeFilterInput!]
  or: [CourseTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  programId: ComparableNullableOfInt32OperationFilterInput
  price: ComparableNullableOfDoubleOperationFilterInput
  color: StringOperationFilterInput
  svgIconUrl: StringOperationFilterInput
  equipmentPriceWithRobot: ComparableNullableOfDoubleOperationFilterInput
  equipmentPriceWithoutRobot: ComparableNullableOfDoubleOperationFilterInput
  durationInMonths: ComparableNullableOfInt32OperationFilterInput
}

input CourseTypeSortInput {
  id: SortEnumType
  name: SortEnumType
  programId: SortEnumType
  price: SortEnumType
  color: SortEnumType
  svgIconUrl: SortEnumType
  equipmentPriceWithRobot: SortEnumType
  equipmentPriceWithoutRobot: SortEnumType
  durationInMonths: SortEnumType
}

input TeacherTypeFilterInput {
  and: [TeacherTypeFilterInput!]
  or: [TeacherTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  patronymic: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  email: StringOperationFilterInput
  password: StringOperationFilterInput
  birthday: ComparableNullableOfDateOnlyOperationFilterInput
  address: StringOperationFilterInput
  education: StringOperationFilterInput
  inn: StringOperationFilterInput
  snils: StringOperationFilterInput
  passportNo: StringOperationFilterInput
  passportIssue: StringOperationFilterInput
  passportDate: ComparableNullableOfDateOnlyOperationFilterInput
  passportCode: StringOperationFilterInput
  isAdmin: BooleanOperationFilterInput
  workPlace: StringOperationFilterInput
  postId: ComparableNullableOfInt32OperationFilterInput
}

input TeacherTypeSortInput {
  id: SortEnumType
  firstName: SortEnumType
  lastName: SortEnumType
  patronymic: SortEnumType
  phoneNumber: SortEnumType
  email: SortEnumType
  password: SortEnumType
  birthday: SortEnumType
  address: SortEnumType
  education: SortEnumType
  inn: SortEnumType
  snils: SortEnumType
  passportNo: SortEnumType
  passportIssue: SortEnumType
  passportDate: SortEnumType
  passportCode: SortEnumType
  isAdmin: SortEnumType
  workPlace: SortEnumType
  postId: SortEnumType
}

input TeachersWorkTimeTypeFilterInput {
  and: [TeachersWorkTimeTypeFilterInput!]
  or: [TeachersWorkTimeTypeFilterInput!]
  teacherId: ComparableInt32OperationFilterInput
  lessonId: ComparableInt32OperationFilterInput
  workTime: ComparableTimeOnlyOperationFilterInput
}

input TeachersWorkTimeTypeSortInput {
  teacherId: SortEnumType
  lessonId: SortEnumType
  workTime: SortEnumType
}

input LessonTypeFilterInput {
  and: [LessonTypeFilterInput!]
  or: [LessonTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  homework: StringOperationFilterInput
  startDateTime: ComparableDateTimeOperationFilterInput
  duration: ComparableInt32OperationFilterInput
  classRoom: StringOperationFilterInput
  topic: StringOperationFilterInput
  groupId: ComparableInt32OperationFilterInput
}

input LessonTypeSortInput {
  id: SortEnumType
  homework: SortEnumType
  startDateTime: SortEnumType
  duration: SortEnumType
  classRoom: SortEnumType
  topic: SortEnumType
  groupId: SortEnumType
}

input AttendanceTypeFilterInput {
  and: [AttendanceTypeFilterInput!]
  or: [AttendanceTypeFilterInput!]
  studentId: ComparableInt32OperationFilterInput
  lessonId: ComparableInt32OperationFilterInput
  mark: ComparableInt32OperationFilterInput
  note: StringOperationFilterInput
  status: StatusOperationFilterInput
}

input AttendanceTypeSortInput {
  studentId: SortEnumType
  lessonId: SortEnumType
  mark: SortEnumType
  note: SortEnumType
  status: SortEnumType
}

input ParentTypeFilterInput {
  and: [ParentTypeFilterInput!]
  or: [ParentTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  patronymic: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  email: StringOperationFilterInput
  password: StringOperationFilterInput
  birthday: ComparableNullableOfDateOnlyOperationFilterInput
  address: StringOperationFilterInput
  education: StringOperationFilterInput
  inn: StringOperationFilterInput
  snils: StringOperationFilterInput
  passportNo: StringOperationFilterInput
  passportIssue: StringOperationFilterInput
  passportDate: ComparableNullableOfDateOnlyOperationFilterInput
  passportCode: StringOperationFilterInput
  isAdmin: BooleanOperationFilterInput
  secondPhoneNumber: StringOperationFilterInput
  secondEmail: StringOperationFilterInput
  applyingDate: ComparableNullableOfDateOnlyOperationFilterInput
  type: NullableOfRelationTypeOperationFilterInput
}

input ParentTypeSortInput {
  id: SortEnumType
  firstName: SortEnumType
  lastName: SortEnumType
  patronymic: SortEnumType
  phoneNumber: SortEnumType
  email: SortEnumType
  password: SortEnumType
  birthday: SortEnumType
  address: SortEnumType
  education: SortEnumType
  inn: SortEnumType
  snils: SortEnumType
  passportNo: SortEnumType
  passportIssue: SortEnumType
  passportDate: SortEnumType
  passportCode: SortEnumType
  isAdmin: SortEnumType
  secondPhoneNumber: SortEnumType
  secondEmail: SortEnumType
  applyingDate: SortEnumType
  type: SortEnumType
}

input SchoolTypeFilterInput {
  and: [SchoolTypeFilterInput!]
  or: [SchoolTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  district: NullableOfDistrictOperationFilterInput
}

input SchoolTypeSortInput {
  id: SortEnumType
  name: SortEnumType
  district: SortEnumType
}

input PostTypeFilterInput {
  and: [PostTypeFilterInput!]
  or: [PostTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
}

input PostTypeSortInput {
  id: SortEnumType
  name: SortEnumType
}

input ProgramTypeFilterInput {
  and: [ProgramTypeFilterInput!]
  or: [ProgramTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  hours: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  programFileUrl: StringOperationFilterInput
  topics: StringOperationFilterInput
}

input ProgramTypeSortInput {
  id: SortEnumType
  hours: SortEnumType
  name: SortEnumType
  programFileUrl: SortEnumType
  topics: SortEnumType
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableNullableOfDateOnlyOperationFilterInput {
  eq: Date
  neq: Date
  in: [Date]
  nin: [Date]
  gt: Date
  ngt: Date
  gte: Date
  ngte: Date
  lt: Date
  nlt: Date
  lte: Date
  nlte: Date
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

enum SortEnumType {
  ASC
  DESC
}

input ComparableDateOnlyOperationFilterInput {
  eq: Date
  neq: Date
  in: [Date!]
  nin: [Date!]
  gt: Date
  ngt: Date
  gte: Date
  ngte: Date
  lt: Date
  nlt: Date
  lte: Date
  nlte: Date
}

input ComparableNullableOfDoubleOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableTimeOnlyOperationFilterInput {
  eq: TimeSpan
  neq: TimeSpan
  in: [TimeSpan!]
  nin: [TimeSpan!]
  gt: TimeSpan
  ngt: TimeSpan
  gte: TimeSpan
  ngte: TimeSpan
  lt: TimeSpan
  nlt: TimeSpan
  lte: TimeSpan
  nlte: TimeSpan
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input StatusOperationFilterInput {
  eq: Status
  neq: Status
  in: [Status!]
  nin: [Status!]
}

input NullableOfRelationTypeOperationFilterInput {
  eq: RelationType
  neq: RelationType
  in: [RelationType]
  nin: [RelationType]
}

input NullableOfDistrictOperationFilterInput {
  eq: District
  neq: District
  in: [District]
  nin: [District]
}

enum District {
  CENTRAL
  TRACTOR
  VOROSHILOVSKIY
}

type ProgramType {
  id: Int!
  hours: Int!
  name: String!
  programFileUrl: String
  topics: String
}

type PostType {
  id: Int!
  name: String!
}

type ParentType {
  id: Int!
  firstName: String
  lastName: String
  patronymic: String
  phoneNumber: String
  email: String
  password: String
  birthday: Date
  address: String
  education: String
  inn: String
  snils: String
  passportNo: String
  passportIssue: String
  passportDate: Date
  passportCode: String
  isAdmin: Boolean!
  secondPhoneNumber: String
  secondEmail: String
  applyingDate: Date
  type: RelationType
}

type AttendanceType {
  student: StudentType!
  lesson: LessonType!
  studentId: Int!
  lessonId: Int!
  mark: Int!
  note: String!
  status: Status!
}

type LessonType {
  group: GroupType!
  id: Int!
  homework: String!
  startDateTime: DateTime!
  duration: Int!
  classRoom: String!
  topic: String!
  groupId: Int!
}

type TeachersWorkTimeType {
  teacher: TeacherType!
  lesson: LessonType!
  teacherId: Int!
  lessonId: Int!
  workTime: TimeSpan!
}

type TeacherType {
  post: String
  id: Int!
  firstName: String
  lastName: String
  patronymic: String
  phoneNumber: String
  email: String!
  password: String!
  birthday: Date
  address: String
  education: String
  inn: String
  snils: String
  passportNo: String
  passportIssue: String
  passportDate: Date
  passportCode: String
  isAdmin: Boolean!
  workPlace: String!
  postId: Int
}

type CourseType {
  id: Int!
  name: String!
  programId: Int
  price: Float
  color: String
  svgIconUrl: String
  equipmentPriceWithRobot: Float
  equipmentPriceWithoutRobot: Float
  durationInMonths: Int
}

type GroupType {
  teacher: TeacherType!
  course: CourseType!
  studentsCount: Int!
  id: Int!
  name: String!
  teacherId: Int!
  startDate: Date!
  courseId: Int!
}

type InfoType {
  course: CourseType!
  group: GroupType
  isCoursePaid: Boolean
  isEquipmentPaid: Boolean
  courseId: Int!
  studentId: Int!
  attempt: Int!
  admissionDate: Date!
  isGetRobot: Boolean
  contractState: ContractState!
}

"""
The `Date` scalar represents an ISO-8601 compliant date type.
"""
scalar Date

type TokenResponseType {
  message: String
  accessToken: String
  refreshToken: String
}

input LoginInput {
  email: String!
  password: String!
}

input RenewTokenInput {
  accessToken: String!
  refreshToken: String!
}

input ParentInput {
  firstName: String
  lastName: String
  patronymic: String
  relationType: RelationType
  phoneNumber: String
  email: String
  password: String
  birthday: Date
  address: String
  education: String
  inn: String
  snils: String
  passportNo: String
  passportIssue: String
  passportDate: Date
  passportCode: String
  secondPhoneNumber: String
  secondEmail: String
  applyingDate: Date
}

input SchoolCreateInput {
  name: String!
  district: District
}

input SchoolUpdateInput {
  id: Int!
  name: String
  district: District
}

input StudentCreateInput {
  firstName: String
  lastName: String
  patronymic: String
  description: String
  birthDate: Date
  schoolId: Int
  parentId: Int!
}

input StudentUpdateInput {
  id: Int!
  firstName: String
  lastName: String
  patronymic: String
  description: String
  birthDate: Date
  schoolId: Int
  parentId: Int
}

input StudentToCourseCreateInput {
  studentId: Int!
  courseId: Int!
  groupId: Int
  admissionDate: Date
  contractState: ContractState!
  contractUrl: String
  isGetRobot: Boolean
}

input StudentToCourseUpdateInput {
  studentId: Int!
  courseId: Int!
  attempt: Int!
  groupId: Int
  admissionDate: Date
  contractState: ContractState
  contractUrl: String
  isGetRobot: Boolean
}

input StudentToCourseDetachInput {
  studentId: Int!
  courseId: Int!
  attempt: Int!
}

input CourseCreateInput {
  name: String!
  programId: Int
  coursePrice: Float
  equipmentPriceWithRobot: Float
  equipmentPriceWithoutRobot: Float
  color: String
  svgIconColor: String
  durationInMonths: Int
}

input CourseUpdateInput {
  id: Int!
  name: String
  programId: Int
  coursePrice: Float
  equipmentPriceWithRobot: Float
  equipmentPriceWithoutRobot: Float
  color: String
  svgIconColor: String
  durationInMonths: Int
}

input TeacherInput {
  firstName: String
  lastName: String
  patronymic: String
  phoneNumber: String
  email: String
  password: String
  birthday: Date
  address: String
  education: String
  inn: String
  snils: String
  passportNo: String
  passportIssue: String
  passportDate: Date
  passportCode: String
  isAdmin: Boolean
  workPlace: String
  postId: Int
  isInternal: Boolean
  wageRateId: Int
}

"""
The `TimeSpan` scalar represents an ISO-8601 compliant duration type.
"""
scalar TimeSpan

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

enum Status {
  ATTENDED
  ABSENT
  ABSENT_VALID_REASON
}

enum RelationType {
  MOTHER
  FATHER
  GRANDMA
  GRANDPA
  AUNT
  UNCLE
  BROTHER
  SISTER
  GUARDIAN
  GODPARENT
  OTHER
}

enum ContractState {
  CONSIDERATION
  REJECTED
  STUDYING
  COMPLETED
  LEFT
  EXCLUDED
}
