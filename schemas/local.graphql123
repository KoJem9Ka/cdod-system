# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type Course {
  Groups: [Group!]!
  Infos: [Info!]!
  equipmentPriceWithRobot: Int
  equipmentPriceWithoutRobot: Int
  id: ID!
  name: String!
  price: Int!
}

type Group {
  Course: Course!
  Infos: [Info!]!
  Teacher: Teacher!
  course_id: ID!
  id: ID!
  name: String!
  startDate: String!
  studentsCount: Int!
  teacher_id: ID!
}

type Info {
  Course: Course!
  Group: Group
  Student: Student!
  admissionDate: String!
  contractState: String!
  course_id: ID!
  group_id: ID!
  isCoursePaid: Boolean!
  isEquipmentPaid: Boolean
  isGetRobot: Boolean
  student_id: ID!
}

type ListMetadata {
  count: Int
}

type Mutation {
  createCourse(equipmentPriceWithRobot: Int, equipmentPriceWithoutRobot: Int, name: String!, price: Int!): Course
  createGroup(course_id: ID!, name: String!, startDate: String!, studentsCount: Int!, teacher_id: ID!): Group
  createInfo(admissionDate: String!, contractState: String!, course_id: ID!, group_id: ID!, isCoursePaid: Boolean!, isEquipmentPaid: Boolean, isGetRobot: Boolean, student_id: ID!): Info
  createManyCourse(data: [CourseInput!]!): [Course!]!
  createManyGroup(data: [GroupInput!]!): [Group!]!
  createManyInfo(data: [InfoInput!]!): [Info!]!
  createManyParent(data: [ParentInput!]!): [Parent!]!
  createManySchool(data: [SchoolInput!]!): [School!]!
  createManyStudent(data: [StudentInput!]!): [Student!]!
  createManyTeacher(data: [TeacherInput!]!): [Teacher!]!
  createParent(applyingDate: String!, email: String!, firstName: String!, lastName: String!, patronymic: String!, phoneNumber: String!, secondEmail: String!, secondPhoneNumber: String!): Parent
  createSchool(district: String!, name: String!): School
  createStudent(birthDate: String!, description: String, firstName: String!, lastName: String!, parent_id: ID!, patronymic: String!, school_id: ID!): Student
  createTeacher(email: String!, firstName: String!, isAdmin: Boolean!, lastName: String!, patronymic: String!, phone: String!, post: String!): Teacher
  removeCourse(id: ID!): Course
  removeGroup(id: ID!): Group
  removeInfo(id: ID!): Info
  removeParent(id: ID!): Parent
  removeSchool(id: ID!): School
  removeStudent(id: ID!): Student
  removeTeacher(id: ID!): Teacher
  updateCourse(equipmentPriceWithRobot: Int, equipmentPriceWithoutRobot: Int, id: ID!, name: String, price: Int): Course
  updateGroup(course_id: ID, id: ID!, name: String, startDate: String, studentsCount: Int, teacher_id: ID): Group
  updateInfo(admissionDate: String, contractState: String, course_id: ID, group_id: ID, isCoursePaid: Boolean, isEquipmentPaid: Boolean, isGetRobot: Boolean, student_id: ID): Info
  updateParent(applyingDate: String, email: String, firstName: String, id: ID!, lastName: String, patronymic: String, phoneNumber: String, secondEmail: String, secondPhoneNumber: String): Parent
  updateSchool(district: String, id: ID!, name: String): School
  updateStudent(birthDate: String, description: String, firstName: String, id: ID!, lastName: String, parent_id: ID, patronymic: String, school_id: ID): Student
  updateTeacher(email: String, firstName: String, id: ID!, isAdmin: Boolean, lastName: String, patronymic: String, phone: String, post: String): Teacher
}

type Parent {
  Students: [Student!]!
  applyingDate: String!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  patronymic: String!
  phoneNumber: String!
  secondEmail: String!
  secondPhoneNumber: String!
}

type Query {
  Course(id: ID!): Course!
  Group(id: ID!): Group!
  Info(id: ID!): Info!
  Parent(id: ID!): Parent!
  School(id: ID!): School!
  Student(id: ID!): Student!
  Teacher(id: ID!): Teacher!
  _allCoursesMeta(filter: CourseFilter, page: Int, perPage: Int): ListMetadata
  _allGroupsMeta(filter: GroupFilter, page: Int, perPage: Int): ListMetadata
  _allInfosMeta(filter: InfoFilter, page: Int, perPage: Int): ListMetadata
  _allParentsMeta(filter: ParentFilter, page: Int, perPage: Int): ListMetadata
  _allSchoolsMeta(filter: SchoolFilter, page: Int, perPage: Int): ListMetadata
  _allStudentsMeta(filter: StudentFilter, page: Int, perPage: Int): ListMetadata
  _allTeachersMeta(filter: TeacherFilter, page: Int, perPage: Int): ListMetadata
  allCourses(filter: CourseFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Course!]!
  allGroups(filter: GroupFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Group!]!
  allInfos(filter: InfoFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Info!]!
  allParents(filter: ParentFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Parent!]!
  allSchools(filter: SchoolFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [School!]!
  allStudents(filter: StudentFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Student!]!
  allTeachers(filter: TeacherFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Teacher!]!
}

type School {
  Students: [Student!]!
  district: String!
  id: ID!
  name: String!
}

type Student {
  Infos: [Info!]!
  Parent: Parent!
  School: School!
  birthDate: String!
  description: String
  firstName: String!
  id: ID!
  lastName: String!
  parent_id: ID!
  patronymic: String!
  school_id: ID!
}

type Teacher {
  Groups: [Group!]!
  email: String!
  firstName: String!
  id: ID!
  isAdmin: Boolean!
  lastName: String!
  patronymic: String!
  phone: String!
  post: String!
}

input CourseFilter {
  equipmentPriceWithRobot: Int
  equipmentPriceWithRobot_gt: Int
  equipmentPriceWithRobot_gte: Int
  equipmentPriceWithRobot_lt: Int
  equipmentPriceWithRobot_lte: Int
  equipmentPriceWithRobot_neq: Int
  equipmentPriceWithoutRobot: Int
  equipmentPriceWithoutRobot_gt: Int
  equipmentPriceWithoutRobot_gte: Int
  equipmentPriceWithoutRobot_lt: Int
  equipmentPriceWithoutRobot_lte: Int
  equipmentPriceWithoutRobot_neq: Int
  id: ID
  id_neq: ID
  ids: [ID!]!
  name: String
  name_neq: String
  price: Int
  price_gt: Int
  price_gte: Int
  price_lt: Int
  price_lte: Int
  price_neq: Int
  q: String
}

input CourseInput {
  equipmentPriceWithRobot: Int
  equipmentPriceWithoutRobot: Int
  id: ID!
  name: String!
  price: Int!
}

input GroupFilter {
  course_id: ID
  course_id_neq: ID
  id: ID
  id_neq: ID
  ids: [ID!]!
  name: String
  name_neq: String
  q: String
  startDate: String
  startDate_neq: String
  studentsCount: Int
  studentsCount_gt: Int
  studentsCount_gte: Int
  studentsCount_lt: Int
  studentsCount_lte: Int
  studentsCount_neq: Int
  teacher_id: ID
  teacher_id_neq: ID
}

input GroupInput {
  course_id: ID!
  id: ID!
  name: String!
  startDate: String!
  studentsCount: Int!
  teacher_id: ID!
}

input InfoFilter {
  admissionDate: String
  admissionDate_neq: String
  contractState: String
  contractState_neq: String
  course_id: ID
  course_id_neq: ID
  group_id: ID
  group_id_neq: ID
  ids: [ID!]!
  isCoursePaid: Boolean
  isEquipmentPaid: Boolean
  isGetRobot: Boolean
  q: String
  student_id: ID
  student_id_neq: ID
}

input InfoInput {
  admissionDate: String!
  contractState: String!
  course_id: ID!
  group_id: ID!
  isCoursePaid: Boolean!
  isEquipmentPaid: Boolean
  isGetRobot: Boolean
  student_id: ID!
}

input ParentFilter {
  applyingDate: String
  applyingDate_neq: String
  email: String
  email_neq: String
  firstName: String
  firstName_neq: String
  id: ID
  id_neq: ID
  ids: [ID!]!
  lastName: String
  lastName_neq: String
  patronymic: String
  patronymic_neq: String
  phoneNumber: String
  phoneNumber_neq: String
  q: String
  secondEmail: String
  secondEmail_neq: String
  secondPhoneNumber: String
  secondPhoneNumber_neq: String
}

input ParentInput {
  applyingDate: String!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  patronymic: String!
  phoneNumber: String!
  secondEmail: String!
  secondPhoneNumber: String!
}

input SchoolFilter {
  district: String
  district_neq: String
  id: ID
  id_neq: ID
  ids: [ID!]!
  name: String
  name_neq: String
  q: String
}

input SchoolInput {
  district: String!
  id: ID!
  name: String!
}

input StudentFilter {
  birthDate: String
  birthDate_neq: String
  description: String
  description_neq: String
  firstName: String
  firstName_neq: String
  id: ID
  id_neq: ID
  ids: [ID!]!
  lastName: String
  lastName_neq: String
  parent_id: ID
  parent_id_neq: ID
  patronymic: String
  patronymic_neq: String
  q: String
  school_id: ID
  school_id_neq: ID
}

input StudentInput {
  birthDate: String!
  description: String
  firstName: String!
  id: ID!
  lastName: String!
  parent_id: ID!
  patronymic: String!
  school_id: ID!
}

input TeacherFilter {
  email: String
  email_neq: String
  firstName: String
  firstName_neq: String
  id: ID
  id_neq: ID
  ids: [ID!]!
  isAdmin: Boolean
  lastName: String
  lastName_neq: String
  patronymic: String
  patronymic_neq: String
  phone: String
  phone_neq: String
  post: String
  post_neq: String
  q: String
}

input TeacherInput {
  email: String!
  firstName: String!
  id: ID!
  isAdmin: Boolean!
  lastName: String!
  patronymic: String!
  phone: String!
  post: String!
}
